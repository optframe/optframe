// OptFrame 4.2 - Optimization Framework
// Copyright (C) 2009-2021 - MIT LICENSE
// https://github.com/optframe/optframe
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// ===================================
// Main.cpp file generated by OptFrame
// Project PMedCap
// ===================================

#include <math.h>
#include <stdlib.h>

#include <iostream>
//
#include <OptFrame/printable/printable.hpp>
using namespace optframe;
//

#include <OptFrame/Core/Move.hpp>  // for testing
#include <OptFrame/Hyper/Loader.hpp>
#include <OptFrame/Timer.hpp>

#include "PMedCap.h"

using namespace std;
using namespace optframe;
using namespace pmedcap;

int main(int argc, char** argv) {
  Timer walltimer;

  srand(time(NULL));
  RandGen rg(time(NULL));

  Scanner scanner(File("./Examples/PMedCap/InstancesLorena/SJC1"));

  // double tempo = 120;

  PCAPProblemInstance p(scanner);
  sref<PCAPEvaluator> e = new PCAPEvaluator(p);
  sref<GeneralEvaluator<ESolutionPCAP>> e2 = e;
  sref<PCAPInitialSolutionGreedy> is_greedy =
      new PCAPInitialSolutionGreedy(p, e2, rg);
  // SolutionPCAP s = *is_greedy.generateSolution(100); // timelimit 100
  ESolutionPCAP se =
      *is_greedy->initialSearch(StopCriteria<EvaluationPCAP>(100))
           .first;  // timelimit 100

  XSolution AUTO_CONCEPTS& s = se.first;
  ////XEvaluation& e = se.second;

  sref<NSSeqSWAP> nsSwap = new NSSeqSWAP(p, rg);

  s.print();

  e->evaluate(s).print();

  PCAPSolCheck(p, s);

  sref<RandGen> rg2{new RandGen(time(NULL))};

  Loader<ESolutionPCAP> optframe(rg2);
  optframe.factory.addComponent(is_greedy, "OptFrame:Constructive");
  optframe.factory.addComponent(e, "OptFrame:GeneralEvaluator");
  optframe.factory.addComponent(nsSwap, "OptFrame:NS");

  // do something!

  std::cout << "Program ended successfully" << std::endl;

  return 0;
}
