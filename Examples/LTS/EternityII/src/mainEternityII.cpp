// OptFrame 4.2 - Optimization Framework
// Copyright (C) 2009-2021 - MIT LICENSE
// https://github.com/optframe/optframe
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// ===================================
// Main.cpp file generated by OptFrame
// Project Eternity II
// ===================================

#include <math.h>
#include <stdlib.h>

#include <iostream>

using namespace std;

#include <filesystem>  // c++17 std::filesystem::current_path
#include <set>
//
#include <OptFrame/Hyper/Loader.hpp>
//
#include <EtII/EternityII.h>

using namespace EtII;

// gets real file path, if file exists, or empty string, if not
std::string resolvePath(std::string sinstance, std::string appPath,
                        std::string bazelPackage = "") {
  // try relative path
  if (std::filesystem::exists(sinstance)) return sinstance;

  // load file from absolute directory that contains executable
  std::filesystem::path exec = appPath;
  std::string full_instance =
      exec.parent_path().string() + std::string("/") + sinstance;
  // std::cout << "loading instance at '" << full_instance << "'" << std::endl;
  if (std::filesystem::exists(full_instance)) return full_instance;

  // try .runfiles directory extension (bazel build for external bazel package)
  full_instance = exec.string() + std::string(".runfiles/") +
                  std::string(bazelPackage) + std::string("/") + sinstance;
  if (std::filesystem::exists(full_instance)) return full_instance;

  // instance not found
  return "";
}

int main(int argc, char** argv) {
  // std::cout << "0: " << argv[0] << std::endl;
  // std::cout << "dir: " << std::filesystem::current_path() << std::endl;

  std::string sinstance = "pieces_set_2/pieces_10x10.txt";

  std::string good_path = resolvePath(sinstance, argv[0], "EternityII");

  if (good_path == "") {
    std::cerr << "Instances not found in executable directory. Aborting."
              << std::endl;
    return 1;  // cannot open file
  }

  // Loader<RepEtII, OPTFRAME_DEFAULT_ADS, SolutionEtII> optframe;
  Loader<ESolutionEtII> optframe;
  EtIIProblemCommand etii;
  etii.load(good_path, optframe.factory, optframe.dictionary,
            optframe.ldictionary);

  std::cout << "Program ended successfully" << std::endl;

  return 0;
}
