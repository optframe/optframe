// OptFrame 4.2 - Optimization Framework
// Copyright (C) 2009-2021 - MIT LICENSE
// https://github.com/optframe/optframe
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//Rename to mainTSP.cpp to run the example

// ===================================
// Main.cpp file generated by OptFrame
// Project Traveling Salesman Problem
// ===================================

#define MaPI

#include <math.h>
#include <stdlib.h>

#include <iostream>

using namespace std;

#include <set>

#include "../../OptFrame/Experimental/VShuffle.hpp"
#include "../../OptFrame/Interpreter.hpp"
#include "../TSP.h"

int
main(int argc, char** argv)
{
   // Optimal value for berlin52 is 7542

   RandGen rg;

   Scanner scanner(new File("../TSP/tsplib/berlin52.txt"));

   TSPProblemInstance* p = new TSPProblemInstance(scanner);

   TSPEvaluator eval(p);

   // MapReduce declaration
   MaPI_MapReduce<RepTSP, RankAndStop, int, pair<RepTSP, double>, RepTSP> mapReduce;
   TSPSerializer serializer;
   MyMaPIMapper<RepTSP, OPTFRAME_DEFAULT_ADS, MemTSP> mapper(&mapReduce, &serializer, eval);
   MyMaPIReducer<RepTSP, OPTFRAME_DEFAULT_ADS, MemTSP> reducer(&mapReduce, &serializer, eval);

   srand(clock() + mapReduce.getMPIRank()); // Setting seed according to mpi rank

   RandomInitialSolutionTSP is(p, rg);

   SolutionTSP& s = is.generateSolution();
   s.print();
   EvaluationTSP* e = &eval.evaluate(s);
   e->print();
   std::cout << std::endl;

   Interpreter<RepTSP, OPTFRAME_DEFAULT_ADS, MemTSP> optframe(rg);
   optframe.factory.add_initsol(&is);
   optframe.factory.add_ev(&eval);
   optframe.factory.add_ns(new NSEnumSwap(p, rg));
   optframe.factory.add_method(new VShuffle<RepTSP, OPTFRAME_DEFAULT_ADS, MemTSP>);

   // Adding MapReduce to factory
   optframe.factory.setMapReduce(&serializer, &mapReduce, &mapper, &reducer, argc, argv);

   optframe.execute("read example.opt");

   std::cout << "Program ended successfully" << std::endl;

   return 0;
}
