name: Test Library on windows and linux

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Install ninja-build (Ubuntu)
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get install ninja-build -y
    - name: Install cmake with pip
      run: |
        python3 -m pip install cmake --upgrade
    - name: Git Submodules
      run: |
        git submodule update --init --recursive
        git pull --recurse-submodules
    - name: make optframe_lib_cmake (windows)
      if: contains(matrix.os, 'windows')
      shell: bash
      run: |
        cmake --version
        mkdir -p build_out
        ls -la
        cmake -S. -Bbuild_out -GNinja
        ninja -Cbuild_out
        mv build/optframe_lib.dll build/optframe_lib.so 
    - name: make optframe_lib
      if: contains(matrix.os, 'ubuntu')
      shell: bash
      run: make optframe_lib
    - name: make optframe_lib_cmake
      shell: bash
      run: |
        cmake --version
        mkdir -p build_out
        ls -la
        cmake -S. -Bbuild_out -GNinja
        ninja -Cbuild_out
        # mv build_out/liboptframe_lib.so build_out/optframe_lib.so


